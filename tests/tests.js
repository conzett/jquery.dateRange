// Generated by CoffeeScript 1.3.3
(function() {

  this.pavlov.specify("DateRange", function() {
    var container, containerId, endDate, startDate, wait, _ref;
    _ref = [], startDate = _ref[0], endDate = _ref[1];
    containerId = "#calendar-container";
    container = function() {
      return $('body').find(containerId);
    };
    wait = function(time) {
      var curDate, date, _results;
      date = new Date();
      _results = [];
      while (curDate - date < time) {
        _results.push(curDate = new Date());
      }
      return _results;
    };
    return describe("DateRange", function() {
      before(function() {
        $('#qunit-fixture').append('<input type="text" id="target"/>');
        return $('#target').dateRange();
      });
      describe("when the plugin is initialized", function() {
        it("should decorate the Date prototype", function() {
          assert(Date.prototype.increment).isDefined();
          return assert(Date.prototype.decrement).isDefined();
        });
        return it("should not insert the calendar containers yet", function() {
          return equal(container().length, 0, "Expect 0 calendar containers before focus");
        });
      });
      describe("with default options", function() {
        describe("when the user focuses on input field", function() {
          before(function() {
            $('#target').focus();
            wait(500);
            startDate = new Date();
            endDate = new Date();
            return endDate.setMonth(startDate.getMonth() + 1);
          });
          it("should insert the calendar container", function() {
            return equal(container().length, 1, "Expect 1 calendar container after focus");
          });
          it("should clear the initial value of the target field", function() {
            return equal($('#target').val(), "", "Expect initial value to be empty");
          });
          it("should append the calendar after the target input field", function() {
            return assert($('#target').next().attr("id")).isEqualTo(containerId.slice(1));
          });
          it("should position the calendar below the target input field", function() {
            var containerOffset, target, targetOffset;
            target = $('#target');
            containerOffset = container().offset();
            targetOffset = target.offset();
            assert(targetOffset.left).isEqualTo(containerOffset.left);
            return assert(targetOffset.top).isEqualTo(containerOffset.top - target.outerHeight(true));
          });
          it("should generate two calendars", function() {
            return assert(container().find("table").length).isEqualTo(2, "2 tables found");
          });
          it("should highlight the startDate", function() {
            var highlitedDateString, todaysDateString;
            highlitedDateString = container().find("table:first").find("[aria-selected='true']").find("time").attr("datetime");
            todaysDateString = (new Date()).toDateString();
            return assert(todaysDateString).isEqualTo(highlitedDateString);
          });
          return it("should highlight the endDate", function() {
            var highlitedDateString, monthFromTodaysDateString, today;
            highlitedDateString = container().find("table:eq(1)").find("[aria-selected='true']").find("time").attr("datetime");
            today = new Date();
            endDate = today;
            endDate.setMonth(today.getMonth() + 1);
            monthFromTodaysDateString = endDate.toDateString();
            return assert(monthFromTodaysDateString).isEqualTo(highlitedDateString);
          });
        });
        return describe("when the user clicks on a date on the calendar", function() {
          before(function() {
            return $('td time[datetime="' + startDate.toDateString() + '"]').parent().click();
          });
          it("should write the clicked startDate into the input field", function() {
            return equal($('#target').val(), startDate.toDateString() + " - " + endDate.toDateString(), "Correct value is now in text field");
          });
          it("should write the clicked endDate into the input field");
          return it("should close the calendar");
        });
      });
      describe("with custom options", function() {
        it("should append the calendar into the target container if appendSelector is specified");
        return it("should disable the target input field if readonly is true");
      });
      describe("when the window size changes", function() {
        return it("should reposition the calendar under the input field");
      });
      describe("when the user clicks away", function() {
        return it("should hide the calendar");
      });
      return describe("generated calendar", function() {
        it("should have the user specified startDate");
        return it("should have the user specified endDate");
      });
    });
  });

}).call(this);
