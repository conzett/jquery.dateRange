// Generated by CoffeeScript 1.3.3
(function() {

  this.pavlov.specify("DateRange", function() {
    var container, containerId, endDate, startDate, wait;
    containerId = "#calendar-container";
    container = function() {
      return $('body').find(containerId);
    };
    startDate = new Date();
    endDate = new Date();
    endDate.setMonth(startDate.getMonth() + 1);
    wait = function(time) {
      var curDate, date, _results;
      date = new Date();
      _results = [];
      while (curDate - date < time) {
        _results.push(curDate = new Date());
      }
      return _results;
    };
    return describe("DateRange", function() {
      before(function() {
        $('#qunit-fixture').append('<input type="text" id="target"/>');
        return $('#target').dateRange();
      });
      describe("when the plugin is initialized", function() {
        it("should decorate the Date prototype", function() {
          assert(Date.prototype.increment).isDefined();
          return assert(Date.prototype.decrement).isDefined();
        });
        return it("should not insert the calendar containers yet", function() {
          return equal(container().length, 0, "Expect 0 calendar containers before focus");
        });
      });
      describe("with default options", function() {
        return describe("when the user focuses on input field", function() {
          before(function() {
            $('#target').focus();
            wait(500);
            startDate = new Date();
            endDate = new Date();
            return endDate.setMonth(startDate.getMonth() + 1);
          });
          it("should insert the calendar container", function() {
            return equal(container().length, 1, "Expect 1 calendar container after focus");
          });
          it("should clear the initial value of the target field", function() {
            return equal($('#target').val(), "", "Expect initial value to be empty");
          });
          it("should append the calendar after the target input field", function() {
            return assert($('#target').next().attr("id")).isEqualTo(containerId.slice(1));
          });
          describe("should position the calendar below the target input field", function() {
            var containerOffset, targetOffset, _ref;
            _ref = [], containerOffset = _ref[0], targetOffset = _ref[1];
            before(function() {
              containerOffset = container().offset();
              return targetOffset = $('#target').offset();
            });
            it("by default", function() {
              assert(targetOffset.left).isEqualTo(containerOffset.left);
              return assert(targetOffset.top).isEqualTo(containerOffset.top - $('#target').outerHeight(true));
            });
            return it("even when the window size changes", function() {
              window.resizeTo(300, 600);
              assert(targetOffset.left).isEqualTo(containerOffset.left);
              return assert(targetOffset.top).isEqualTo(containerOffset.top - $('#target').outerHeight(true));
            });
          });
          it("should generate two calendars", function() {
            return assert(container().find("table").length).isEqualTo(2, "2 tables found");
          });
          it("should highlight the startDate", function() {
            var highlitedDateString, todaysDateString;
            highlitedDateString = container().find("table:first").find("[aria-selected='true']").find("time").attr("datetime");
            todaysDateString = (new Date()).toDateString();
            return assert(todaysDateString).isEqualTo(highlitedDateString);
          });
          it("should highlight the endDate", function() {
            var highlitedDateString, monthFromTodaysDateString;
            highlitedDateString = container().find("table:eq(1)").find("[aria-selected='true']").find("time").attr("datetime");
            monthFromTodaysDateString = endDate.toDateString();
            return assert(monthFromTodaysDateString).isEqualTo(highlitedDateString);
          });
          describe("when the user clicks on a date on the calendar", function() {
            before(function() {
              var selector, todayCell, todayCellParent;
              selector = "td time[datetime='" + (startDate.toDateString()) + "']";
              todayCell = $(selector);
              todayCellParent = todayCell.parent();
              return todayCellParent.click();
            });
            return it("should write the correct startDate into the input field", function() {
              return equal($('#target').val(), startDate.toDateString() + " - " + endDate.toDateString(), "Correct value is now in text field");
            });
          });
          return describe("when the user clicks away", function() {
            before(function() {
              return $("#target").focus().blur();
            });
            return it("should hide the calendar", function() {
              return assert(container().length).isEqualTo(0);
            });
          });
        });
      });
      return describe("with custom options", function() {
        it("should append the calendar into a new appendage if appendSelector is specified", function() {
          $('#target').remove();
          $('#qunit-fixture').append('<div id="new_appendage"/><input type="text" id="target"/>');
          $('#target').dateRange({
            appendSelector: "#new_appendage"
          });
          $("#target").focus();
          return assert($('#new_appendage > div').attr("id")).isEqualTo(containerId.slice(1));
        });
        return it("should disable the target input field if readonly is true", function() {
          $('#target').remove();
          $('#qunit-fixture').append('<input type="text" id="target"/>');
          $('#target').dateRange({
            readonly: true
          });
          $("#target").focus();
          return assert($("#target").attr("readonly")).isEqualTo("readonly");
        });
      });
    });
  });

}).call(this);
