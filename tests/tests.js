// Generated by CoffeeScript 1.3.3
(function() {

  this.pavlov.specify("DateRange", function() {
    var container, endDate, startDate, wait, _ref;
    _ref = [], startDate = _ref[0], endDate = _ref[1];
    container = $('body').find("#calendar-container");
    wait = function(time) {
      var curDate, date, _results;
      date = new Date();
      _results = [];
      while (curDate - date < time) {
        _results.push(curDate = new Date());
      }
      return _results;
    };
    return describe("DateRange", function() {
      before(function() {
        $('#qunit-fixture').append('<input type="text" id="target"/>');
        return $('#target').dateRange();
      });
      describe("when the plugin is initialized", function() {
        it("should decorate the Date prototype");
        it("should position the calendar under the target input field");
        it("should disable the target input field if readonly is true");
        return it("should not insert the calendar containers yet", function() {
          return equal(container.length, 0, "Expect 0 calendar containers before focus");
        });
      });
      describe("when the user focuses on input field", function() {
        before(function() {
          $('#target').focus();
          wait(500);
          startDate = new Date();
          endDate = new Date();
          return endDate.setMonth(startDate.getMonth() + 1);
        });
        it("should insert the calendar container", function() {
          return equal(container.length, 1, "Expect 1 calendar container after focus");
        });
        it("should clear the initial value of the target field", function() {
          return equal($('#target').val(), "", "Expect initial value to be empty");
        });
        it("should append the calendar into the target container");
        it("should generate two calendars if the daterange option is true");
        it("should highlight the startDate");
        it("should highlight the endDate");
        return describe("when the user clicks on a date on the calendar", function() {
          before(function() {
            return $('td time[datetime="' + startDate.toDateString() + '"]').parent().click();
          });
          it("should write the clicked startDate into the input field", function() {
            return equal($('#target').val(), startDate.toDateString() + " - " + endDate.toDateString(), "Correct value is now in text field");
          });
          it("should write the clicked endDate into the input field");
          return it("should close the calendar");
        });
      });
      describe("when the window size changes", function() {
        return it("should reposition the calendar under the input field");
      });
      describe("when the user clicks away", function() {
        return it("should hide the calendar");
      });
      return describe("generated calendar", function() {
        it("should have the user specified startDate");
        return it("should have the user specified endDate");
      });
    });
  });

}).call(this);
